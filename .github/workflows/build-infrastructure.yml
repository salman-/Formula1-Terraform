# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.

name: 'Provision infrastructure'

on: [ push,pull_request, workflow_dispatch ]


env:
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}

  DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
  DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}

  VIRTUAL_MACHINE_USERNAME: ${{secrets.VIRTUAL_MACHINE_USERNAME}}
  VIRTUAL_MACHINE_PASSWORD: ${{secrets.VIRTUAL_MACHINE_PASSWORD}}

  ROOT_PATH: '${{github.workspace}}/terraform-src'
  NUMBER_OF_CONCURRENT_THREADS: 5

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.ROOT_PATH}}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt
        working-directory: ${{env.ROOT_PATH}}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: ${{env.ROOT_PATH}}

      # Get Terraform modules
      - name: Terraform GET
        run: terraform get
        working-directory: ${{env.ROOT_PATH}}

      - name: Import state of Resource-Group
        run: terraform import azurerm_resource_group.main_resource_group "/subscriptions/${{env.ARM_SUBSCRIPTION_ID}}/resourceGroups/RG-Terraform-on-Azure"
        working-directory: ${{env.ROOT_PATH}}

      - name: Terraform Apply
        run: terraform apply -auto-approve -parallelism=${{env.NUMBER_OF_CONCURRENT_THREADS}} -var="pipeline_database_username=${{env.DATABASE_USERNAME}}" -var="pipeline_database_password=${{env.DATABASE_PASSWORD}}"  -var="pipeline_virtual_machine_username=${{env.VIRTUAL_MACHINE_USERNAME}}" -var="pipeline_virtual_machine_password=${{env.VIRTUAL_MACHINE_PASSWORD}}"
        working-directory: ${{env.ROOT_PATH}}
